// L·∫Øng nghe message t·ª´ background script
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
    if (request.action === 'showNotification') {
        showAnimatedNotification(request.category, request.message);
    }
});

// Hi·ªÉn th·ªã th√¥ng b√°o ƒë·ªông v·ªõi GIF
function showAnimatedNotification(category, message) {
    // X√≥a notification c≈© n·∫øu c√≥
    const oldNotification = document.getElementById('focus-assistant-notification');
    if (oldNotification) {
        oldNotification.remove();
    }
    
    // Ch·ªçn GIF d·ª±a tr√™n category
    const gifUrls = {
        studying: 'https://media.giphy.com/media/3o7btNhMBytxAM6YBa/giphy.gif', // Study GIF
        working: 'https://media.giphy.com/media/xT9IgzoKnwFNmISR8I/giphy.gif', // Work GIF
        entertainment: 'https://media.giphy.com/media/3o7TKSjRrfIPjeiVyM/giphy.gif', // Fun GIF
        social_media: 'https://media.giphy.com/media/l0HlBO7eyXzSZkJri/giphy.gif', // Social GIF
        news: 'https://media.giphy.com/media/3o7TKP9ln2Dr6ze6f6/giphy.gif' // News GIF
    };
    
    const colors = {
        studying: '#4CAF50',
        working: '#2196F3',
        entertainment: '#FF9800',
        social_media: '#E91E63',
        news: '#9C27B0'
    };
    
    // T·∫°o container th√¥ng b√°o
    const notification = document.createElement('div');
    notification.id = 'focus-assistant-notification';
    notification.className = 'focus-notification';
    
    // Thi·∫øt l·∫≠p m√†u d·ª±a tr√™n category
    const color = colors[category] || '#667eea';
    
    notification.innerHTML = `
        <div class="notification-content" style="border-left-color: ${color}">
            <div class="notification-gif">
                <img src="${gifUrls[category] || gifUrls.working}" alt="notification">
            </div>
            <div class="notification-text">
                <div class="notification-category" style="color: ${color}">
                    ${getCategoryText(category)}
                </div>
                <div class="notification-message">${message}</div>
            </div>
            <button class="notification-close">&times;</button>
        </div>
    `;
    
    // Th√™m v√†o trang
    document.body.appendChild(notification);
    
    // Th√™m animation
    setTimeout(() => {
        notification.classList.add('show');
    }, 100);
    
    // X·ª≠ l√Ω n√∫t ƒë√≥ng
    const closeBtn = notification.querySelector('.notification-close');
    closeBtn.addEventListener('click', () => {
        closeNotification(notification);
    });
    
    // √Çm thanh ƒë√£ ƒë∆∞·ª£c ph√°t t·ª´ background script
    
    // T·ª± ƒë·ªông ƒë√≥ng sau 10 gi√¢y
    setTimeout(() => {
        closeNotification(notification);
    }, 10000);
}

// ƒê√≥ng th√¥ng b√°o
function closeNotification(notification) {
    notification.classList.remove('show');
    setTimeout(() => {
        if (notification && notification.parentNode) {
            notification.remove();
        }
    }, 300);
}

// L·∫•y text hi·ªÉn th·ªã cho category
function getCategoryText(category) {
    const texts = {
        studying: 'üìö ƒêang H·ªçc T·∫≠p',
        working: 'üíº ƒêang L√†m Vi·ªác',
        entertainment: 'üéÆ Gi·∫£i Tr√≠',
        social_media: 'üì± M·∫°ng X√£ H·ªôi',
        news: 'üì∞ Tin T·ª©c'
    };
    return texts[category] || 'üìå Th√¥ng B√°o';
}

// Ph√°t √¢m thanh b·∫±ng Chrome TTS API
function speakMessage(text) {
    try {
        // S·ª≠ d·ª•ng Chrome TTS API (ph∆∞∆°ng ph√°p ch√≠nh)
        chrome.tts.speak(text, {
            lang: 'vi-VN',
            rate: 0.9,
            pitch: 1.0,
            volume: 0.7,
            onEvent: function(event) {
                if (event.type === 'error') {
                    console.log('Chrome TTS l·ªói, th·ª≠ ph∆∞∆°ng ph√°p d·ª± ph√≤ng');
                    // Th·ª≠ ph∆∞∆°ng ph√°p d·ª± ph√≤ng
                    fallbackSpeak(text);
                }
            }
        });
    } catch (error) {
        console.error('L·ªói khi ph√°t √¢m thanh:', error);
        // Th·ª≠ ph∆∞∆°ng ph√°p d·ª± ph√≤ng
        fallbackSpeak(text);
    }
}

// Ph∆∞∆°ng ph√°p d·ª± ph√≤ng s·ª≠ d·ª•ng Web Speech API
function fallbackSpeak(text) {
    try {
        if ('speechSynthesis' in window) {
            const utterance = new SpeechSynthesisUtterance(text);
            utterance.lang = 'vi-VN';
            utterance.rate = 0.9;
            utterance.pitch = 1.0;
            utterance.volume = 0.7;
            
            // T√¨m gi·ªçng ti·∫øng Vi·ªát
            const voices = speechSynthesis.getVoices();
            const vietnameseVoice = voices.find(voice => 
                voice.lang.includes('vi') || voice.lang.includes('VN')
            );
            
            if (vietnameseVoice) {
                utterance.voice = vietnameseVoice;
            }
            
            speechSynthesis.speak(utterance);
        } else {
            console.log('Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ Web Speech API');
        }
    } catch (error) {
        console.error('L·ªói ph∆∞∆°ng ph√°p d·ª± ph√≤ng:', error);
    }
}